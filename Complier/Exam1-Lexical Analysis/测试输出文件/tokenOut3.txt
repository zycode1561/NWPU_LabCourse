read file :test3.txtclass -> class
identifier -> WhatHappen
assign -> {public -> public
static -> static
void -> void
main -> main
assign -> (String -> String
assign -> [assign -> ]identifier -> args
assign -> )assign -> {identifier -> MyClient
identifier -> mc
assign -> ;int -> int
identifier -> handle
assign -> ;identifier -> mc
assign -> =new -> new
identifier -> MyClient
assign -> (assign -> )assign -> ;while -> while
assign -> (assign -> !false -> false
assign -> )assign -> {identifier -> handle
assign -> =identifier -> mc
assign -> .identifier -> start
assign -> (Digit -> 10assign -> ,Digit -> 10assign -> )assign -> ;assign -> }assign -> }assign -> }class -> class
identifier -> Client
assign -> {int -> int
identifier -> in
assign -> ;int -> int
identifier -> out
assign -> ;int -> int
assign -> [assign -> ]identifier -> messagelist
assign -> ;int -> int
identifier -> index
assign -> ;public -> public
boolean -> boolean
identifier -> init
assign -> (assign -> )assign -> {identifier -> index
assign -> =Digit -> 0assign -> ;identifier -> messagelist
assign -> =new -> new
int -> int
assign -> [Digit -> 10assign -> ]assign -> ;identifier -> in
assign -> =Digit -> 0assign -> ;identifier -> out
assign -> =Digit -> 0assign -> ;return -> return
true -> true
assign -> ;assign -> }public -> public
int -> int
identifier -> run
assign -> (int -> int
identifier -> host
assign -> ,int -> int
identifier -> port
assign -> )assign -> {int -> int
identifier -> handle
assign -> ;identifier -> handle
assign -> =this -> this
assign -> .identifier -> Juggling
assign -> (assign -> )assign -> ;assign -> }public -> public
int -> int
identifier -> getMsg
assign -> (assign -> )assign -> {int -> int
identifier -> tmp
assign -> ;identifier -> tmp
assign -> =identifier -> messagelist
assign -> .length -> length
assign -> ;if -> if
assign -> (this -> this
assign -> .identifier -> isVoid
assign -> (assign -> )assign -> )assign -> {identifier -> tmp
assign -> =identifier -> tmp
assign -> -Digit -> 1assign -> ;assign -> }else -> else
assign -> {identifier -> tmp
assign -> =identifier -> tmp
assign -> *Digit -> 2assign -> ;assign -> }if -> if
assign -> (identifier -> index
assign -> <Digit -> 10assign -> )assign -> {identifier -> messagelist
assign -> [identifier -> index
assign -> ]assign -> =identifier -> tmp
assign -> ;identifier -> index
assign -> =identifier -> index
assign -> +Digit -> 1assign -> ;assign -> }else -> else
assign -> {identifier -> index
assign -> =Digit -> 0assign -> ;assign -> }return -> return
identifier -> tmp
assign -> ;assign -> }public -> public
boolean -> boolean
identifier -> isVoid
assign -> (assign -> )assign -> {boolean -> boolean
identifier -> flag
assign -> ;if -> if
assign -> (identifier -> messagelist
assign -> .length -> length
error type : unknown symbol
error: an error in line : 52identifier -> flag
assign -> =false -> false
assign -> ;assign -> }else -> else
assign -> {identifier -> flag
assign -> =true -> true
assign -> ;assign -> }return -> return
identifier -> flag
assign -> ;assign -> }public -> public
int -> int
identifier -> Juggling
assign -> (assign -> )assign -> {boolean -> boolean
identifier -> t
assign -> ;int -> int
identifier -> tmp1
assign -> ;int -> int
identifier -> tmp2
assign -> ;int -> int
identifier -> tmp3
assign -> ;identifier -> tmp1
assign -> =Digit -> 2assign -> ;identifier -> tmp2
assign -> =Digit -> 3assign -> ;identifier -> tmp3
assign -> =Digit -> 4assign -> ;while -> while
assign -> (assign -> (identifier -> tmp2
assign -> <identifier -> tmp3
assign -> )assign -> &&identifier -> tmp1
assign -> <identifier -> tmp2
assign -> )assign -> )assign -> {identifier -> tmp1
assign -> =identifier -> tmp3
assign -> -identifier -> tmp2
assign -> ;identifier -> tmp2
assign -> =identifier -> tmp2
assign -> -identifier -> tmp1
assign -> ;identifier -> tmp3
assign -> =identifier -> tmp2
assign -> *identifier -> tmp1
assign -> ;identifier -> t
assign -> =this -> this
assign -> .identifier -> HolyLight
assign -> (assign -> )assign -> ;assign -> }return -> return
assign -> (identifier -> tmp1
assign -> *identifier -> tmp2
assign -> +identifier -> tmp3
assign -> )assign -> *identifier -> messagelist
assign -> .length -> length
assign -> ;assign -> }public -> public
boolean -> boolean
identifier -> HolyLight
assign -> (assign -> )assign -> {identifier -> in
assign -> =identifier -> in
assign -> +Digit -> 1assign -> ;identifier -> out
assign -> =identifier -> out
assign -> -Digit -> 1assign -> ;identifier -> Systemout
assign -> .identifier -> println
assign -> (false -> false
assign -> )assign -> ;assign -> }assign -> }class -> class
identifier -> MyClient
identifier -> extend
identifier -> Client
assign -> {public -> public
int -> int
identifier -> start
assign -> (int -> int
identifier -> host
assign -> ,int -> int
identifier -> port
assign -> )assign -> {int -> int
identifier -> handle
assign -> ;identifier -> handle
assign -> =this -> this
assign -> .identifier -> run
assign -> (assign -> )return -> return
identifier -> handle
assign -> ;assign -> }assign -> }